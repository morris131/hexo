{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1555317632154},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1555317632155},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1555317632155},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1555317632156},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1555317632156},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1555317632167},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1555317632167},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1555317632167},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1555317632168},{"_id":"themes/next/_config.yml","hash":"aa50fc683674b224beff1b33a39144470ffea9d3","modified":1555320530534},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1555317632169},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1555317632169},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1555317632181},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1555317632233},{"_id":"source/categories/index.md","hash":"914ec19557b0850b4c6124942d184920b007b05c","modified":1555316629928},{"_id":"source/tags/index.md","hash":"693fad53e7d2342524589f739ca25d0bf8052ce7","modified":1555316629929},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1555317632170},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1555317632171},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1555317632171},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1555317632171},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1555317632173},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1555317632173},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1555317632174},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1555317632174},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1555317632174},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1555317632182},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1555317632183},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1555317632183},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1555317632184},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1555317632184},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1555317632185},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1555317632185},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1555317632186},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1555317632186},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1555317632186},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1555317632187},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1555317632187},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1555317632188},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1555317632188},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1555317632188},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1555317632189},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1555317632189},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1555317632190},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1555317632190},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1555317632192},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1555317632231},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1555317632231},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1555317632232},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1555317632232},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1555317632232},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1555317632233},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1555317632233},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1555317632236},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1555317632237},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1555317632326},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1555317632327},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1555317632327},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632297},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1555317632175},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1555317632175},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1555317632176},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1555317632177},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1555317632177},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1555317632178},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1555317632178},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1555317632179},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1555317632179},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1555317632180},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1555317632180},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1555317632181},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1555317632181},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1555317632191},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555317632191},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555317632192},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1555317632194},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1555317632194},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1555317632195},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1555317632196},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1555317632197},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0dda1c4b8b3d8c0f24ad2f9b4d06989b969b83f8","modified":1555488555317},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1555317632201},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1555317632202},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1555317632208},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1555317632209},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1555317632209},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1555317632210},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1555317632212},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1555317632213},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1555317632219},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1555317632220},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1555317632220},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1555317632224},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1555317632226},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1555317632226},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1555317632227},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1555317632227},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1555317632227},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1555317632228},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1555317632228},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1555317632230},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1555317632234},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1555317632235},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1555317632235},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1555317632237},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1555317632238},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1555317632238},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1555317632238},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1555317632239},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1555317632239},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1555317632240},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1555317632240},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1555317632241},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1555317632241},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1555317632242},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1555317632242},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1555317632297},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555317632298},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555317632298},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555317632299},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555317632299},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555317632300},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555317632300},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555317632301},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555317632301},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555317632301},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555317632302},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555317632302},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555317632303},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555317632303},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555317632303},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555317632304},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555317632304},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555317632304},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555317632305},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1555317632305},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1555317632306},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1555317632306},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1555317632307},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1555317632307},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1555317632308},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1555317632308},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1555317632309},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1555317632310},{"_id":"themes/next/source/js/utils.js","hash":"d58033a6a108981c81ac58ee321167047d7a25df","modified":1555317632310},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632281},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632280},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632282},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632294},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555317632296},{"_id":"source/_posts/Java/netty/AIO.md","hash":"7a46429fc1fda1409a3f942969bbfadaaa6f3981","modified":1555502317198},{"_id":"source/_posts/Java/netty/BIO.md","hash":"fc53fa194da8e0e87bb8b12defa1f65bf8190cbf","modified":1555501721454},{"_id":"source/_posts/Java/netty/NIO.md","hash":"b0f9f995af88e4cea1a8eac36c1b0f39307115d3","modified":1555502280039},{"_id":"source/_posts/Java/netty/netty helloworld.md","hash":"9767d20188b4bbea3996c5b1b4a65404f40902dc","modified":1555502399242},{"_id":"source/_posts/Java/netty/伪异步IO.md","hash":"85ca4208c214be52eaa549aa1d309a67bfc0d5b8","modified":1555502209400},{"_id":"source/_posts/Java/netty/四种IO的比较.md","hash":"694212b028a0b39aa70804c1661f39d7f20e4b33","modified":1555496647849},{"_id":"source/_posts/开发工具/git/git设置mergetool可视化工具BeyondCompare.md","hash":"af84616a0bae3d7258b07e2f6102f90dd6127b7e","modified":1555488230901},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1555317632193},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1555317632193},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1555317632198},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"3e23886592bae8dc71fe690a0825676c5400f07f","modified":1555494045401},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1555317632198},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1555317632199},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1555317632199},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1555317632200},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1555317632199},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1555317632201},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1555317632201},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1555317632202},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1555317632203},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1555317632203},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1555317632204},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1555317632204},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1555317632205},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1555317632205},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1555317632206},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1555317632206},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1555317632207},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1555317632207},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1555317632210},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1555317632211},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1555317632211},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1555317632211},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1555317632212},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1555317632214},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1555317632215},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1555317632214},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1555317632215},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1555317632215},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1555317632216},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1555317632216},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1555317632217},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1555317632216},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1555317632217},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1555317632218},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1555317632218},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1555317632218},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1555317632219},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1555317632221},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1555317632222},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1555317632221},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1555317632222},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1555317632223},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1555317632223},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1555317632224},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1555317632224},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1555317632225},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1555317632225},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1555317632226},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1555317632229},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1555317632229},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1555317632230},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1555317632280},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1555317632280},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1555317632281},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1555317632282},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1555317632293},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1555317632294},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1555317632295},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1555317632296},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1555317632309},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1555317632309},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1555317632311},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1555317632312},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1555317632312},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555317632312},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1555317632313},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1555317632322},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1555317632323},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1555317632326},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1555317632320},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1555317632244},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1555317632244},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1555317632246},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1555317632247},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1555317632247},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1555317632257},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1555317632263},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1555317632264},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1555317632276},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1555317632277},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1555317632277},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"1d21dbfdaca5cdf73ba84f7e6d37ca329c0cf3bd","modified":1555317632278},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1555317632278},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1555317632279},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1555317632279},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1555317632283},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1555317632284},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1555317632284},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1555317632284},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1555317632285},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1555317632285},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1555317632286},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555317632286},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1555317632288},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1555317632288},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1555317632289},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555317632289},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1555317632290},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1555317632291},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1555317632291},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1555317632292},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1555317632292},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1555317632293},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1555317632293},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1555317632314},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555317632314},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1555317632315},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555317632319},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1555317632322},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1555317632248},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1555317632248},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1555317632249},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1555317632249},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1555317632249},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1555317632250},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1555317632250},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1555317632251},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1555317632251},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1555317632252},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1555317632253},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1555317632252},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1555317632253},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1555317632255},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1555317632256},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1555317632256},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1555317632256},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1555317632257},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1555317632258},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1555317632258},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1555317632259},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1555317632259},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1555317632259},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1555317632260},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1555317632260},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1555317632260},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1555317632261},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1555317632261},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1555317632262},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1555317632261},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1555317632262},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1555317632263},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1555317632263},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1555317632265},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1555317632264},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1555317632265},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1555317632266},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1555317632266},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1555317632266},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1555317632267},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1555317632267},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1555317632267},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1555317632268},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1555317632268},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1555317632269},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1555317632269},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1555317632270},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1555317632270},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1555317632271},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1555317632271},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1555317632271},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1555317632272},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1555317632272},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1555317632273},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1555317632273},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1555317632274},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1555317632274},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1555317632274},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1555317632275},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1555317632275},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1555317632275},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1555317632287},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555317632287},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555317632290},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555317632318},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555317632317},{"_id":"public/search.xml","hash":"8d17fe1ffe9df111ad99bad487c6e7b20d1153f6","modified":1555502463280},{"_id":"public/baidusitemap.xml","hash":"22653aaa98a71d3acc104c78382c4bff56a11f94","modified":1555502463280},{"_id":"public/categories/index.html","hash":"1bda9bdd6de16b9421ac662211b9279383cc91c9","modified":1555502463293},{"_id":"public/tags/index.html","hash":"76e965cf2cad5034515aaf422e52529a4e4017e8","modified":1555502463293},{"_id":"public/posts/4b8728f1.html","hash":"3f306b0e86b8f8a3e984d254209d8a857bfa415c","modified":1555502463293},{"_id":"public/posts/49c196a8.html","hash":"50d3c663b2907679d0f38035b145e50b94a78b03","modified":1555502463293},{"_id":"public/posts/429dd195.html","hash":"121ba05da2c54c283e989f7643bddc614906e79b","modified":1555502463293},{"_id":"public/posts/28519d34.html","hash":"57384564a52ed3b4c2c102d2089e11840e2f91ee","modified":1555502463293},{"_id":"public/posts/66487d6f.html","hash":"fb501dfc4e7a9fb78fe028e6333d4f5228031177","modified":1555502463293},{"_id":"public/posts/cde0db97.html","hash":"efa37fbeb5c2c7076952431bd4ab057ad75cd7cf","modified":1555502463293},{"_id":"public/posts/3765ef4c.html","hash":"766a29bcabaebad77d03e31d718d6465078c2c92","modified":1555502463293},{"_id":"public/archives/index.html","hash":"d4fa92b9a64fdb33e2a56c3c9f93037684fa2f31","modified":1555502463293},{"_id":"public/archives/2018/index.html","hash":"6599c83597057d50aa5aaeabbc1314925732565b","modified":1555502463293},{"_id":"public/archives/2018/04/index.html","hash":"62ffcac4c9857656ab4e3362efaed8a018ea6aee","modified":1555502463293},{"_id":"public/archives/2019/index.html","hash":"6f876fad9f8299aca8051430a4ae2c468866a844","modified":1555502463293},{"_id":"public/archives/2019/04/index.html","hash":"dc7844a9d900cc54ae0e43c94bd874985ea24553","modified":1555502463294},{"_id":"public/index.html","hash":"90785bbaec9c0b0fe505a28415ff2fd2b61ce452","modified":1555502463294},{"_id":"public/tags/netty/index.html","hash":"1d65b3c65788695debe2ed602efc5d9950555956","modified":1555502463294},{"_id":"public/tags/BIO/index.html","hash":"63bffa6c3d84123c27a9ee1435b2b3864add01e4","modified":1555502463294},{"_id":"public/tags/NIO/index.html","hash":"f6809bde737e624dc8e47701b053569678cfe7d5","modified":1555502463295},{"_id":"public/tags/git/index.html","hash":"8097b594f5bddc9f1110fbf07d06395e0012492a","modified":1555502463295},{"_id":"public/tags/AIO/index.html","hash":"eeebffb6d0d918d5b8745144c6c5a182c8b5af76","modified":1555502463295},{"_id":"public/tags/mergetool/index.html","hash":"4bcc77ebace843ddf2197260421ab4e542c2645a","modified":1555502463295},{"_id":"public/tags/BeyondCompare/index.html","hash":"9f16ff815ff813460ed94e0501483d0517c65f19","modified":1555502463295},{"_id":"public/categories/netty/index.html","hash":"5223881347fd94482b7a17da4bb3e76ab28b6cf6","modified":1555502463295},{"_id":"public/categories/git/index.html","hash":"999aed382fdefb27e2e7f64a4f143e25fb993a11","modified":1555502463295},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555502463300},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555502463300},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555502463301},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555502463301},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555502463301},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555502463301},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555502463301},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555502463301},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555502463301},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555502463301},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555502463301},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555502463301},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555502463301},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555502463302},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555502463302},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555502463302},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555502463302},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555502463302},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555502463302},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555502463751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555502463752},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555502463752},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555502463756},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555502463756},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555502463756},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555502463756},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555502463756},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555502463756},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555502463756},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555502463756},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555502463756},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555502463757},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555502463757},{"_id":"public/css/main.css","hash":"862f4766a34aca0ba8d9bca5adb50bc0f353dc85","modified":1555502463757},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555502463768},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555502463768},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555502463768},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555502463768},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555502463774},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555502463777},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555502463777},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555502463777},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555502463792},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555502463795}],"Category":[{"name":"netty","_id":"cjul604wv0004h4qhp626gnik"},{"name":"git","_id":"cjul604zf000zh4qhjumn8u1t"}],"Data":[],"Page":[{"title":"分类","date":"2018-09-12T08:52:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-12 16:52:37\ntype: \"categories\"\n---\n","updated":"2019-04-15T08:23:49.928Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjul604u60000h4qhqpbs395m","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-09-12T08:53:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-09-12 16:53:27\ntype: \"tags\"\n---\n","updated":"2019-04-15T08:23:49.929Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjul604u80001h4qhimzkbf31","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AIO","date":"2019-04-16T16:00:00.000Z","_content":"\n# AIO\n\n与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Server.java)\n```java\npackage com.morris.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Server {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tCountDownLatch countDownLatch = new CountDownLatch(1);\n\t\t\n\t\tAsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();\n\n\t\tasynchronousServerSocketChannel.bind(new InetSocketAddress(8899));\n\n\t\tasynchronousServerSocketChannel.accept(asynchronousServerSocketChannel, new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {\n\t\t\t@Override\n\t\t\tpublic void completed(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment) {\n\n\t\t\t\tattachment.accept(attachment, this);\n\n\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n\t\t\t\tresult.read(byteBuffer, result , new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\tbyteBuffer.flip();\n\n\t\t\t\t\t\t// read\n\t\t\t\t\t\tbyte[] bytes = new byte[byteBuffer.remaining()];\n\t\t\t\t\t\tbyteBuffer.get(bytes);\n\t\t\t\t\t\tSystem.out.println(\"receive from client: \" + new String(bytes));\n\n\t\t\t\t\t\t// write\n\t\t\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(\"hello client\".getBytes());\n\t\t\t\t\t\tattachment.write(resultBuf, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {\n\n\t\t\t}\n\t\t});\n\n\t\tSystem.out.println(\"server is start on port: 8899\");\n\n\t\tcountDownLatch.await();\n\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Client.java)\n```java\npackage com.morris.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Client {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tCountDownLatch countDownLatch = new CountDownLatch(1);\n\n\t\tAsynchronousSocketChannel asynchronousServerSocketChannel = AsynchronousSocketChannel.open();\n\n\t\tasynchronousServerSocketChannel.connect(new InetSocketAddress(\"127.0.0.1\", 8899), asynchronousServerSocketChannel, new CompletionHandler<Void, AsynchronousSocketChannel>() {\n\t\t\t@Override\n\t\t\tpublic void completed(Void result, AsynchronousSocketChannel attachment) {\n\n\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(\"hello server\".getBytes());\n\t\t\t\tattachment.write(resultBuf, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n\t\t\t\t\t\tattachment.read(byteBuffer, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\t\t\tbyteBuffer.flip();\n\n\t\t\t\t\t\t\t\tbyte[] bytes = new byte[byteBuffer.remaining()];\n\t\t\t\t\t\t\t\tbyteBuffer.get(bytes);\n\n\t\t\t\t\t\t\t\tString body = new String(bytes);\n\n\t\t\t\t\t\t\t\tSystem.out.println(\"receive from server: \" + body);\n\n\t\t\t\t\t\t\t\tcountDownLatch.countDown();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t}\n\t\t});\n\t\tcountDownLatch.await();\n    }\n}\n```\n\n\n","source":"_posts/Java/netty/AIO.md","raw":"---\ntitle: AIO\ndate: 2019-04-17\ncategories: netty\ntags: [AIO,netty]\n---\n\n# AIO\n\n与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Server.java)\n```java\npackage com.morris.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Server {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tCountDownLatch countDownLatch = new CountDownLatch(1);\n\t\t\n\t\tAsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();\n\n\t\tasynchronousServerSocketChannel.bind(new InetSocketAddress(8899));\n\n\t\tasynchronousServerSocketChannel.accept(asynchronousServerSocketChannel, new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {\n\t\t\t@Override\n\t\t\tpublic void completed(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment) {\n\n\t\t\t\tattachment.accept(attachment, this);\n\n\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n\t\t\t\tresult.read(byteBuffer, result , new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\tbyteBuffer.flip();\n\n\t\t\t\t\t\t// read\n\t\t\t\t\t\tbyte[] bytes = new byte[byteBuffer.remaining()];\n\t\t\t\t\t\tbyteBuffer.get(bytes);\n\t\t\t\t\t\tSystem.out.println(\"receive from client: \" + new String(bytes));\n\n\t\t\t\t\t\t// write\n\t\t\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(\"hello client\".getBytes());\n\t\t\t\t\t\tattachment.write(resultBuf, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {\n\n\t\t\t}\n\t\t});\n\n\t\tSystem.out.println(\"server is start on port: 8899\");\n\n\t\tcountDownLatch.await();\n\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Client.java)\n```java\npackage com.morris.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Client {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tCountDownLatch countDownLatch = new CountDownLatch(1);\n\n\t\tAsynchronousSocketChannel asynchronousServerSocketChannel = AsynchronousSocketChannel.open();\n\n\t\tasynchronousServerSocketChannel.connect(new InetSocketAddress(\"127.0.0.1\", 8899), asynchronousServerSocketChannel, new CompletionHandler<Void, AsynchronousSocketChannel>() {\n\t\t\t@Override\n\t\t\tpublic void completed(Void result, AsynchronousSocketChannel attachment) {\n\n\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(\"hello server\".getBytes());\n\t\t\t\tattachment.write(resultBuf, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n\t\t\t\t\t\tattachment.read(byteBuffer, attachment, new CompletionHandler<Integer, AsynchronousSocketChannel>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void completed(Integer result, AsynchronousSocketChannel attachment) {\n\t\t\t\t\t\t\t\tbyteBuffer.flip();\n\n\t\t\t\t\t\t\t\tbyte[] bytes = new byte[byteBuffer.remaining()];\n\t\t\t\t\t\t\t\tbyteBuffer.get(bytes);\n\n\t\t\t\t\t\t\t\tString body = new String(bytes);\n\n\t\t\t\t\t\t\t\tSystem.out.println(\"receive from server: \" + body);\n\n\t\t\t\t\t\t\t\tcountDownLatch.countDown();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failed(Throwable exc, AsynchronousSocketChannel attachment) {\n\n\t\t\t}\n\t\t});\n\t\tcountDownLatch.await();\n    }\n}\n```\n\n\n","slug":"Java/netty/AIO","published":1,"updated":"2019-04-17T11:58:37.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604wj0002h4qhj5ipluj9","content":"<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.aio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.CompletionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tAsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8899</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.accept(asynchronousServerSocketChannel, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tattachment.accept(attachment, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t\tresult.read(byteBuffer, result , <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tbyteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// read</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteBuffer.remaining()];</span><br><span class=\"line\">\t\t\t\t\t\tbyteBuffer.get(bytes);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"receive from client: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// write</span></span><br><span class=\"line\">\t\t\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(<span class=\"string\">\"hello client\"</span>.getBytes());</span><br><span class=\"line\">\t\t\t\t\t\tattachment.write(resultBuf, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousServerSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"server is start on port: 8899\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.aio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.CompletionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAsynchronousSocketChannel asynchronousServerSocketChannel = AsynchronousSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>), asynchronousServerSocketChannel, <span class=\"keyword\">new</span> CompletionHandler&lt;Void, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Void result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(<span class=\"string\">\"hello server\"</span>.getBytes());</span><br><span class=\"line\">\t\t\t\tattachment.write(resultBuf, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t\t\t\tattachment.read(byteBuffer, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tbyteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteBuffer.remaining()];</span><br><span class=\"line\">\t\t\t\t\t\t\t\tbyteBuffer.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tString body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"receive from server: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"abbrlink":"49c196a8","excerpt":"","more":"<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.aio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.CompletionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tAsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8899</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.accept(asynchronousServerSocketChannel, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tattachment.accept(attachment, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t\tresult.read(byteBuffer, result , <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tbyteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// read</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteBuffer.remaining()];</span><br><span class=\"line\">\t\t\t\t\t\tbyteBuffer.get(bytes);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"receive from client: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// write</span></span><br><span class=\"line\">\t\t\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(<span class=\"string\">\"hello client\"</span>.getBytes());</span><br><span class=\"line\">\t\t\t\t\t\tattachment.write(resultBuf, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousServerSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"server is start on port: 8899\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/aio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.aio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.CompletionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAsynchronousSocketChannel asynchronousServerSocketChannel = AsynchronousSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tasynchronousServerSocketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>), asynchronousServerSocketChannel, <span class=\"keyword\">new</span> CompletionHandler&lt;Void, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Void result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tByteBuffer resultBuf = ByteBuffer.wrap(<span class=\"string\">\"hello server\"</span>.getBytes());</span><br><span class=\"line\">\t\t\t\tattachment.write(resultBuf, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\t\t\t\tattachment.read(byteBuffer, attachment, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, AsynchronousSocketChannel&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tbyteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteBuffer.remaining()];</span><br><span class=\"line\">\t\t\t\t\t\t\t\tbyteBuffer.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tString body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tSystem.out.println(<span class=\"string\">\"receive from server: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\tcountDownLatch.countDown();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, AsynchronousSocketChannel attachment)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tcountDownLatch.await();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"BIO","date":"2019-04-16T16:00:00.000Z","_content":"\n# BIO\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Server.java)\n```java\npackage com.morris.bio;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n\n        System.out.println(\"server is start on port: \" + PORT);\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            new Thread(new ServerHandler(socket)).start();\n        }\n\n    }\n\n}\n```\n[ServerHandler.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/ServerHandler.java)\n```java\npackage com.morris.bio;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.channels.NonReadableChannelException;\n\npublic class ServerHandler implements Runnable {\n\n    private Socket socket;\n\n    public ServerHandler(Socket socket) {\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n\n            // 读取数据\n            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line = null;\n            //while (true) {\n                line = bufferedReader.readLine();\n\n                System.out.println(\"receive message from client: \" + line);\n\n                // 发送数据\n                printWriter = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()), true);\n                printWriter.println(\"hello client\");\n            //}\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n\n            if(null != bufferedReader) {\n                try {\n                    bufferedReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            if(null != printWriter) {\n                printWriter.close();\n            }\n\n            if(null != socket) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Client.java)\n```java\npackage com.morris.bio;\n\nimport java.io.*;\nimport java.net.Socket;\n\npublic class Client {\n\n    public static void main(String[] args) throws IOException {\n\n        Socket socket = new Socket(\"127.0.0.1\", 8899);\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            // 发送数据\n            printWriter = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()), true);\n            printWriter.println(\"hello server\");\n\n            // 读取数据\n            String line = null;\n            while (null != (line = bufferedReader.readLine())) {\n                System.out.println(\"receive message from server: \" + line);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if(null != printWriter) {\n                printWriter.close();\n            }\n\n            if(null != bufferedReader) {\n                try {\n                    bufferedReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            if(null != socket) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\n```","source":"_posts/Java/netty/BIO.md","raw":"---\ntitle: BIO\ndate: 2019-04-17\ncategories: netty\ntags: [BIO,netty]\n---\n\n# BIO\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Server.java)\n```java\npackage com.morris.bio;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n\n        System.out.println(\"server is start on port: \" + PORT);\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            new Thread(new ServerHandler(socket)).start();\n        }\n\n    }\n\n}\n```\n[ServerHandler.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/ServerHandler.java)\n```java\npackage com.morris.bio;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.channels.NonReadableChannelException;\n\npublic class ServerHandler implements Runnable {\n\n    private Socket socket;\n\n    public ServerHandler(Socket socket) {\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n\n            // 读取数据\n            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line = null;\n            //while (true) {\n                line = bufferedReader.readLine();\n\n                System.out.println(\"receive message from client: \" + line);\n\n                // 发送数据\n                printWriter = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()), true);\n                printWriter.println(\"hello client\");\n            //}\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n\n            if(null != bufferedReader) {\n                try {\n                    bufferedReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            if(null != printWriter) {\n                printWriter.close();\n            }\n\n            if(null != socket) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Client.java)\n```java\npackage com.morris.bio;\n\nimport java.io.*;\nimport java.net.Socket;\n\npublic class Client {\n\n    public static void main(String[] args) throws IOException {\n\n        Socket socket = new Socket(\"127.0.0.1\", 8899);\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            // 发送数据\n            printWriter = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()), true);\n            printWriter.println(\"hello server\");\n\n            // 读取数据\n            String line = null;\n            while (null != (line = bufferedReader.readLine())) {\n                System.out.println(\"receive message from server: \" + line);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if(null != printWriter) {\n                printWriter.close();\n            }\n\n            if(null != bufferedReader) {\n                try {\n                    bufferedReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            if(null != socket) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n    }\n}\n```","slug":"Java/netty/BIO","published":1,"updated":"2019-04-17T11:48:41.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604wo0003h4qhuskpuih4","content":"<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServerHandler(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/ServerHandler.java\" target=\"_blank\" rel=\"noopener\">ServerHandler.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.NonReadableChannelException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerHandler</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintWriter printWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">            bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">//while (true) &#123;</span></span><br><span class=\"line\">                line = bufferedReader.readLine();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"receive message from client: \"</span> + line);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">                printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                printWriter.println(<span class=\"string\">\"hello client\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != bufferedReader) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bufferedReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != printWriter) &#123;</span><br><span class=\"line\">                printWriter.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != socket) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintWriter printWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            printWriter.println(<span class=\"string\">\"hello server\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">            String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != (line = bufferedReader.readLine())) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"receive message from server: \"</span> + line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != printWriter) &#123;</span><br><span class=\"line\">                printWriter.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != bufferedReader) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bufferedReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != socket) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"abbrlink":"4b8728f1","excerpt":"","more":"<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ServerHandler(socket)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/ServerHandler.java\" target=\"_blank\" rel=\"noopener\">ServerHandler.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.NonReadableChannelException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerHandler</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintWriter printWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">            bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">//while (true) &#123;</span></span><br><span class=\"line\">                line = bufferedReader.readLine();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"receive message from client: \"</span> + line);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">                printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                printWriter.println(<span class=\"string\">\"hello client\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != bufferedReader) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bufferedReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != printWriter) &#123;</span><br><span class=\"line\">                printWriter.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != socket) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/bio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.bio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintWriter printWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(socket.getOutputStream()), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            printWriter.println(<span class=\"string\">\"hello server\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">            String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != (line = bufferedReader.readLine())) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"receive message from server: \"</span> + line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != printWriter) &#123;</span><br><span class=\"line\">                printWriter.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != bufferedReader) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    bufferedReader.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != socket) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"NIO","date":"2019-04-16T16:00:00.000Z","_content":"\n# NIO \nNIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务。\n\n在NIO中有几个核心对象需要掌握：缓冲区（Buffer）、通道（Channel）、选择器（Selector）。\n\n## Buffer\nBuffer其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。\n   \n所有的缓冲区类型都继承于抽象类Buffer，最常用的就是ByteBuffer。\n\n## Channel\nChannel是一个对象，通过它可以读取和写入数据，当然了所有数据都通过Buffer对象来处理。\n\n## Selector\n通道和缓冲区的机制，使得线程无需阻塞地等待IO事件的就绪，但是总是要有人来监管这些IO事件。这个工作就交给了selector来完成，这就是所谓的同步。\n\nSelector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。\n\n要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪，这就是所说的轮询。一旦这个方法返回，线程就可以处理这些事件。\n\nSelector中注册的感兴趣事件有：\n- OP_ACCEPT\n- OP_CONNECT \n- OP_READ \n- OP_WRITE\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Server.java)\n```java\npackage com.morris.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n\n        Selector selector = Selector.open();\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\n        serverSocketChannel.configureBlocking(false); // 设置为非阻塞方式\n\n        serverSocketChannel.socket().bind(new InetSocketAddress(PORT));\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); // 注册监听的事件\n\n        System.out.println(\"server is start on port: \" + PORT);\n\n        while (true) {\n\n            selector.select(1000);\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> selectionKeyIterator = selectionKeys.iterator();\n\n            while (selectionKeyIterator.hasNext()) {\n                SelectionKey key = selectionKeyIterator.next();\n                selectionKeyIterator.remove();\n\n                if(key.isValid()) {\n                    if(key.isAcceptable()){\n                        ServerSocketChannel ssChannel = (ServerSocketChannel)key.channel();\n                        SocketChannel sc = ssChannel.accept();\n                        sc.configureBlocking(false);\n                        sc.register(key.selector(), SelectionKey.OP_READ);\n                    }\n                    if(key.isReadable()){\n                        SocketChannel sc = (SocketChannel)key.channel();\n                        ByteBuffer buf = ByteBuffer.allocate(1024);\n                        int bytesRead = sc.read(buf);\n                        if(bytesRead > 0){\n                            buf.flip();\n\n                            byte[] bytes = new byte[buf.remaining()];\n                            buf.get(bytes);\n\n                            String body = new String(bytes);\n\n                            System.out.println(\"receive from client: \" + body);\n\n                            String response = \"hello client\";\n\n                            bytes = response.getBytes();\n\n                            buf = ByteBuffer.allocate(bytes.length);\n                            buf.put(bytes);\n                            buf.flip();\n                            sc.write(buf);\n                            key.cancel();\n                            sc.close();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Client.java)\n```java\npackage com.morris.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class Client {\n\n    public static int PORT = 8899;\n\n    private static volatile boolean stop = true;\n\n    public static void main(String[] args) throws IOException {\n\n        Selector selector = Selector.open();\n        SocketChannel serverSocketChannel = SocketChannel.open();\n\n        serverSocketChannel.configureBlocking(false); // 设置为非阻塞方式\n\n        boolean connect = serverSocketChannel.connect(new InetSocketAddress(\"127.0.0.1\", PORT));\n\n        if (connect) {\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); // 注册监听的事件\n        } else {\n            serverSocketChannel.register(selector, SelectionKey.OP_CONNECT); // 注册监听的事件\n        }\n\n        while (stop) {\n\n            selector.select(1000);\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> selectionKeyIterator = selectionKeys.iterator();\n\n            while (selectionKeyIterator.hasNext()) {\n                SelectionKey key = selectionKeyIterator.next();\n                selectionKeyIterator.remove();\n\n                if (key.isValid()) {\n                    SocketChannel sc = (SocketChannel) key.channel();\n\n                    if (key.isConnectable()) {\n\n                        if (sc.finishConnect()) {\n                            sc.register(selector, SelectionKey.OP_READ);\n\n                            String response = \"hello server\";\n\n                            byte[] bytes = response.getBytes();\n\n                            ByteBuffer buf = ByteBuffer.allocate(bytes.length);\n                            buf.put(bytes);\n                            buf.flip();\n                            sc.write(buf);\n                        }\n\n                    }\n\n                    if (key.isReadable()) {\n                        ByteBuffer buf = ByteBuffer.allocate(1024);\n                        int bytesRead = sc.read(buf);\n                        if (bytesRead > 0) {\n                            buf.flip();\n\n                            byte[] bytes = new byte[buf.remaining()];\n                            buf.get(bytes);\n\n                            String body = new String(bytes);\n\n                            System.out.println(\"receive from server: \" + body);\n\n                            key.cancel();\n                            sc.close();\n\n                            stop = false;\n\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n","source":"_posts/Java/netty/NIO.md","raw":"---\ntitle: NIO\ndate: 2019-04-17\ncategories: netty\ntags: [NIO,netty]\n---\n\n# NIO \nNIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务。\n\n在NIO中有几个核心对象需要掌握：缓冲区（Buffer）、通道（Channel）、选择器（Selector）。\n\n## Buffer\nBuffer其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。\n   \n所有的缓冲区类型都继承于抽象类Buffer，最常用的就是ByteBuffer。\n\n## Channel\nChannel是一个对象，通过它可以读取和写入数据，当然了所有数据都通过Buffer对象来处理。\n\n## Selector\n通道和缓冲区的机制，使得线程无需阻塞地等待IO事件的就绪，但是总是要有人来监管这些IO事件。这个工作就交给了selector来完成，这就是所谓的同步。\n\nSelector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。\n\n要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪，这就是所说的轮询。一旦这个方法返回，线程就可以处理这些事件。\n\nSelector中注册的感兴趣事件有：\n- OP_ACCEPT\n- OP_CONNECT \n- OP_READ \n- OP_WRITE\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Server.java)\n```java\npackage com.morris.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n\n        Selector selector = Selector.open();\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\n        serverSocketChannel.configureBlocking(false); // 设置为非阻塞方式\n\n        serverSocketChannel.socket().bind(new InetSocketAddress(PORT));\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); // 注册监听的事件\n\n        System.out.println(\"server is start on port: \" + PORT);\n\n        while (true) {\n\n            selector.select(1000);\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> selectionKeyIterator = selectionKeys.iterator();\n\n            while (selectionKeyIterator.hasNext()) {\n                SelectionKey key = selectionKeyIterator.next();\n                selectionKeyIterator.remove();\n\n                if(key.isValid()) {\n                    if(key.isAcceptable()){\n                        ServerSocketChannel ssChannel = (ServerSocketChannel)key.channel();\n                        SocketChannel sc = ssChannel.accept();\n                        sc.configureBlocking(false);\n                        sc.register(key.selector(), SelectionKey.OP_READ);\n                    }\n                    if(key.isReadable()){\n                        SocketChannel sc = (SocketChannel)key.channel();\n                        ByteBuffer buf = ByteBuffer.allocate(1024);\n                        int bytesRead = sc.read(buf);\n                        if(bytesRead > 0){\n                            buf.flip();\n\n                            byte[] bytes = new byte[buf.remaining()];\n                            buf.get(bytes);\n\n                            String body = new String(bytes);\n\n                            System.out.println(\"receive from client: \" + body);\n\n                            String response = \"hello client\";\n\n                            bytes = response.getBytes();\n\n                            buf = ByteBuffer.allocate(bytes.length);\n                            buf.put(bytes);\n                            buf.flip();\n                            sc.write(buf);\n                            key.cancel();\n                            sc.close();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Client.java)\n```java\npackage com.morris.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class Client {\n\n    public static int PORT = 8899;\n\n    private static volatile boolean stop = true;\n\n    public static void main(String[] args) throws IOException {\n\n        Selector selector = Selector.open();\n        SocketChannel serverSocketChannel = SocketChannel.open();\n\n        serverSocketChannel.configureBlocking(false); // 设置为非阻塞方式\n\n        boolean connect = serverSocketChannel.connect(new InetSocketAddress(\"127.0.0.1\", PORT));\n\n        if (connect) {\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); // 注册监听的事件\n        } else {\n            serverSocketChannel.register(selector, SelectionKey.OP_CONNECT); // 注册监听的事件\n        }\n\n        while (stop) {\n\n            selector.select(1000);\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> selectionKeyIterator = selectionKeys.iterator();\n\n            while (selectionKeyIterator.hasNext()) {\n                SelectionKey key = selectionKeyIterator.next();\n                selectionKeyIterator.remove();\n\n                if (key.isValid()) {\n                    SocketChannel sc = (SocketChannel) key.channel();\n\n                    if (key.isConnectable()) {\n\n                        if (sc.finishConnect()) {\n                            sc.register(selector, SelectionKey.OP_READ);\n\n                            String response = \"hello server\";\n\n                            byte[] bytes = response.getBytes();\n\n                            ByteBuffer buf = ByteBuffer.allocate(bytes.length);\n                            buf.put(bytes);\n                            buf.flip();\n                            sc.write(buf);\n                        }\n\n                    }\n\n                    if (key.isReadable()) {\n                        ByteBuffer buf = ByteBuffer.allocate(1024);\n                        int bytesRead = sc.read(buf);\n                        if (bytesRead > 0) {\n                            buf.flip();\n\n                            byte[] bytes = new byte[buf.remaining()];\n                            buf.get(bytes);\n\n                            String body = new String(bytes);\n\n                            System.out.println(\"receive from server: \" + body);\n\n                            key.cancel();\n                            sc.close();\n\n                            stop = false;\n\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n","slug":"Java/netty/NIO","published":1,"updated":"2019-04-17T11:58:00.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604wy0006h4qh9r9rfr6x","content":"<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务。</p>\n<p>在NIO中有几个核心对象需要掌握：缓冲区（Buffer）、通道（Channel）、选择器（Selector）。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>Buffer其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。</p>\n<p>所有的缓冲区类型都继承于抽象类Buffer，最常用的就是ByteBuffer。</p>\n<h2 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h2><p>Channel是一个对象，通过它可以读取和写入数据，当然了所有数据都通过Buffer对象来处理。</p>\n<h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><p>通道和缓冲区的机制，使得线程无需阻塞地等待IO事件的就绪，但是总是要有人来监管这些IO事件。这个工作就交给了selector来完成，这就是所谓的同步。</p>\n<p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。</p>\n<p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪，这就是所说的轮询。一旦这个方法返回，线程就可以处理这些事件。</p>\n<p>Selector中注册的感兴趣事件有：</p>\n<ul>\n<li>OP_ACCEPT</li>\n<li>OP_CONNECT </li>\n<li>OP_READ </li>\n<li>OP_WRITE</li>\n</ul>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.nio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>); <span class=\"comment\">// 设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(PORT));</span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; selectionKeyIterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (selectionKeyIterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = selectionKeyIterator.next();</span><br><span class=\"line\">                selectionKeyIterator.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key.isValid()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(key.isAcceptable())&#123;</span><br><span class=\"line\">                        ServerSocketChannel ssChannel = (ServerSocketChannel)key.channel();</span><br><span class=\"line\">                        SocketChannel sc = ssChannel.accept();</span><br><span class=\"line\">                        sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        sc.register(key.selector(), SelectionKey.OP_READ);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(key.isReadable())&#123;</span><br><span class=\"line\">                        SocketChannel sc = (SocketChannel)key.channel();</span><br><span class=\"line\">                        ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bytesRead = sc.read(buf);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(bytesRead &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buf.remaining()];</span><br><span class=\"line\">                            buf.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"receive from client: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String response = <span class=\"string\">\"hello client\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            bytes = response.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">                            buf = ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">                            buf.put(bytes);</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\">                            sc.write(buf);</span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            sc.close();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.nio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        SocketChannel serverSocketChannel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>); <span class=\"comment\">// 设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> connect = serverSocketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, PORT));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connect) &#123;</span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_CONNECT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stop) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; selectionKeyIterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (selectionKeyIterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = selectionKeyIterator.next();</span><br><span class=\"line\">                selectionKeyIterator.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isValid()) &#123;</span><br><span class=\"line\">                    SocketChannel sc = (SocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isConnectable()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sc.finishConnect()) &#123;</span><br><span class=\"line\">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String response = <span class=\"string\">\"hello server\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = response.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">                            ByteBuffer buf = ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">                            buf.put(bytes);</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\">                            sc.write(buf);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                        ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bytesRead = sc.read(buf);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (bytesRead &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buf.remaining()];</span><br><span class=\"line\">                            buf.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"receive from server: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            sc.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                            stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"abbrlink":"429dd195","excerpt":"","more":"<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务。</p>\n<p>在NIO中有几个核心对象需要掌握：缓冲区（Buffer）、通道（Channel）、选择器（Selector）。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>Buffer其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的； 在写入数据时，它也是写入到缓冲区中的；任何时候访问 NIO 中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。</p>\n<p>所有的缓冲区类型都继承于抽象类Buffer，最常用的就是ByteBuffer。</p>\n<h2 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h2><p>Channel是一个对象，通过它可以读取和写入数据，当然了所有数据都通过Buffer对象来处理。</p>\n<h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><p>通道和缓冲区的机制，使得线程无需阻塞地等待IO事件的就绪，但是总是要有人来监管这些IO事件。这个工作就交给了selector来完成，这就是所谓的同步。</p>\n<p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。</p>\n<p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪，这就是所说的轮询。一旦这个方法返回，线程就可以处理这些事件。</p>\n<p>Selector中注册的感兴趣事件有：</p>\n<ul>\n<li>OP_ACCEPT</li>\n<li>OP_CONNECT </li>\n<li>OP_READ </li>\n<li>OP_WRITE</li>\n</ul>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.nio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>); <span class=\"comment\">// 设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(PORT));</span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; selectionKeyIterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (selectionKeyIterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = selectionKeyIterator.next();</span><br><span class=\"line\">                selectionKeyIterator.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key.isValid()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(key.isAcceptable())&#123;</span><br><span class=\"line\">                        ServerSocketChannel ssChannel = (ServerSocketChannel)key.channel();</span><br><span class=\"line\">                        SocketChannel sc = ssChannel.accept();</span><br><span class=\"line\">                        sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        sc.register(key.selector(), SelectionKey.OP_READ);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(key.isReadable())&#123;</span><br><span class=\"line\">                        SocketChannel sc = (SocketChannel)key.channel();</span><br><span class=\"line\">                        ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bytesRead = sc.read(buf);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(bytesRead &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buf.remaining()];</span><br><span class=\"line\">                            buf.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"receive from client: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String response = <span class=\"string\">\"hello client\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            bytes = response.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">                            buf = ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">                            buf.put(bytes);</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\">                            sc.write(buf);</span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            sc.close();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/nio/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.nio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        SocketChannel serverSocketChannel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>); <span class=\"comment\">// 设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> connect = serverSocketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, PORT));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connect) &#123;</span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_CONNECT); <span class=\"comment\">// 注册监听的事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stop) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            selector.select(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; selectionKeyIterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (selectionKeyIterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = selectionKeyIterator.next();</span><br><span class=\"line\">                selectionKeyIterator.remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key.isValid()) &#123;</span><br><span class=\"line\">                    SocketChannel sc = (SocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isConnectable()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (sc.finishConnect()) &#123;</span><br><span class=\"line\">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String response = <span class=\"string\">\"hello server\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = response.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">                            ByteBuffer buf = ByteBuffer.allocate(bytes.length);</span><br><span class=\"line\">                            buf.put(bytes);</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\">                            sc.write(buf);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                        ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bytesRead = sc.read(buf);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (bytesRead &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            buf.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buf.remaining()];</span><br><span class=\"line\">                            buf.get(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            String body = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"receive from server: \"</span> + body);</span><br><span class=\"line\"></span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            sc.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                            stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"netty helloworld","date":"2019-04-16T16:00:00.000Z","_content":"\n# netty helloworld\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Server.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ServerHandler());\n                        }\n                    });\n\n            // 启动 server.\n            ChannelFuture f = b.bind(PORT).sync();\n\n            System.out.println(\"server is start on port: \" + PORT);\n\n            // 等待socket关闭\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n}\n```\n\n[ServerHandler.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/ServerHandler.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerAdapter;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class ServerHandler extends ChannelHandlerAdapter {\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        try {\n\n            ByteBuf receiveByteBuf = (ByteBuf) msg;\n            byte[] bytes = new byte[receiveByteBuf.readableBytes()];\n            receiveByteBuf.readBytes(bytes);\n            System.out.println(\"receive from client: \" + new String(bytes));\n\n            ByteBuf sendByteBuf = Unpooled.copiedBuffer(\"hello client\".getBytes());\n            ctx.writeAndFlush(sendByteBuf);\n\n        } finally {\n            ReferenceCountUtil.release(msg);\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Client.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class Client {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ClientHandler());\n                        }\n                    });\n\n            // 启动 server.\n            ChannelFuture f = b.connect(\"127.0.0.1\", 8899).sync();\n\n            // 等待socket关闭\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n}\n```\n\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerAdapter;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class ClientHandler extends ChannelHandlerAdapter {\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        ByteBuf sendByteBuf = Unpooled.copiedBuffer(\"hello server\".getBytes());\n        ctx.writeAndFlush(sendByteBuf);\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        try {\n\n            ByteBuf receiveByteBuf = (ByteBuf) msg;\n            byte[] bytes = new byte[receiveByteBuf.readableBytes()];\n            receiveByteBuf.readBytes(bytes);\n            System.out.println(\"receive from server: \" + new String(bytes));\n\n            ctx.close();\n\n        } finally {\n            ReferenceCountUtil.release(msg);\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n}\n```\n\n\n\n\n","source":"_posts/Java/netty/netty helloworld.md","raw":"---\ntitle: netty helloworld\ndate: 2019-04-17\ncategories: netty\ntags: [netty]\n---\n\n# netty helloworld\n\n## server\n[Server.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Server.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class Server {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ServerHandler());\n                        }\n                    });\n\n            // 启动 server.\n            ChannelFuture f = b.bind(PORT).sync();\n\n            System.out.println(\"server is start on port: \" + PORT);\n\n            // 等待socket关闭\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n}\n```\n\n[ServerHandler.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/ServerHandler.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerAdapter;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class ServerHandler extends ChannelHandlerAdapter {\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        try {\n\n            ByteBuf receiveByteBuf = (ByteBuf) msg;\n            byte[] bytes = new byte[receiveByteBuf.readableBytes()];\n            receiveByteBuf.readBytes(bytes);\n            System.out.println(\"receive from client: \" + new String(bytes));\n\n            ByteBuf sendByteBuf = Unpooled.copiedBuffer(\"hello client\".getBytes());\n            ctx.writeAndFlush(sendByteBuf);\n\n        } finally {\n            ReferenceCountUtil.release(msg);\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n}\n```\n\n## client\n[Client.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Client.java)\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class Client {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ClientHandler());\n                        }\n                    });\n\n            // 启动 server.\n            ChannelFuture f = b.connect(\"127.0.0.1\", 8899).sync();\n\n            // 等待socket关闭\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n}\n```\n\n```java\npackage com.morris.netty.basic;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerAdapter;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class ClientHandler extends ChannelHandlerAdapter {\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        ByteBuf sendByteBuf = Unpooled.copiedBuffer(\"hello server\".getBytes());\n        ctx.writeAndFlush(sendByteBuf);\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        try {\n\n            ByteBuf receiveByteBuf = (ByteBuf) msg;\n            byte[] bytes = new byte[receiveByteBuf.readableBytes()];\n            receiveByteBuf.readBytes(bytes);\n            System.out.println(\"receive from server: \" + new String(bytes));\n\n            ctx.close();\n\n        } finally {\n            ReferenceCountUtil.release(msg);\n        }\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n}\n```\n\n\n\n\n","slug":"Java/netty/netty helloworld","published":1,"updated":"2019-04-17T11:59:59.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604wz0007h4qhbz2l502m","content":"<h1 id=\"netty-helloworld\"><a href=\"#netty-helloworld\" class=\"headerlink\" title=\"netty helloworld\"></a>netty helloworld</h1><h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap b = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> ServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动 server.</span></span><br><span class=\"line\">            ChannelFuture f = b.bind(PORT).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待socket关闭</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/ServerHandler.java\" target=\"_blank\" rel=\"noopener\">ServerHandler.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf receiveByteBuf = (ByteBuf) msg;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[receiveByteBuf.readableBytes()];</span><br><span class=\"line\">            receiveByteBuf.readBytes(bytes);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"receive from client: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf sendByteBuf = Unpooled.copiedBuffer(<span class=\"string\">\"hello client\"</span>.getBytes());</span><br><span class=\"line\">            ctx.writeAndFlush(sendByteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ReferenceCountUtil.release(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Bootstrap b = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            b.group(workerGroup)</span><br><span class=\"line\">                    .channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> ClientHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动 server.</span></span><br><span class=\"line\">            ChannelFuture f = b.connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待socket关闭</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteBuf sendByteBuf = Unpooled.copiedBuffer(<span class=\"string\">\"hello server\"</span>.getBytes());</span><br><span class=\"line\">        ctx.writeAndFlush(sendByteBuf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf receiveByteBuf = (ByteBuf) msg;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[receiveByteBuf.readableBytes()];</span><br><span class=\"line\">            receiveByteBuf.readBytes(bytes);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"receive from server: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">            ctx.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ReferenceCountUtil.release(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"28519d34","excerpt":"","more":"<h1 id=\"netty-helloworld\"><a href=\"#netty-helloworld\" class=\"headerlink\" title=\"netty helloworld\"></a>netty helloworld</h1><h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Server.java\" target=\"_blank\" rel=\"noopener\">Server.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap b = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> ServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动 server.</span></span><br><span class=\"line\">            ChannelFuture f = b.bind(PORT).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待socket关闭</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/ServerHandler.java\" target=\"_blank\" rel=\"noopener\">ServerHandler.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBufUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf receiveByteBuf = (ByteBuf) msg;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[receiveByteBuf.readableBytes()];</span><br><span class=\"line\">            receiveByteBuf.readBytes(bytes);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"receive from client: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf sendByteBuf = Unpooled.copiedBuffer(<span class=\"string\">\"hello client\"</span>.getBytes());</span><br><span class=\"line\">            ctx.writeAndFlush(sendByteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ReferenceCountUtil.release(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/netty/basic/Client.java\" target=\"_blank\" rel=\"noopener\">Client.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Bootstrap b = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            b.group(workerGroup)</span><br><span class=\"line\">                    .channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> ClientHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动 server.</span></span><br><span class=\"line\">            ChannelFuture f = b.connect(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8899</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待socket关闭</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.netty.basic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteBuf sendByteBuf = Unpooled.copiedBuffer(<span class=\"string\">\"hello server\"</span>.getBytes());</span><br><span class=\"line\">        ctx.writeAndFlush(sendByteBuf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf receiveByteBuf = (ByteBuf) msg;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[receiveByteBuf.readableBytes()];</span><br><span class=\"line\">            receiveByteBuf.readBytes(bytes);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"receive from server: \"</span> + <span class=\"keyword\">new</span> String(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">            ctx.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ReferenceCountUtil.release(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"伪异步IO","date":"2019-04-16T16:00:00.000Z","_content":"\n# 伪异步IO\n伪异步IO只是用线程池管理BIO中的线程,其他代码与BIO一致。\n\n## server\n[FakeBIOServer.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/fakebio/FakeBIOServer.java)\n```java\npackage com.morris.fakebio;\n\nimport com.morris.bio.ServerHandler;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class FakeBIOServer {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n\n        System.out.println(\"server is start on port: \" + PORT);\n        \n        ExecutorService executorService = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), 100, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1000));\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            executorService.execute(new ServerHandler(socket));\n        }\n\n    }\n\n}\n```\n\n\n\n\n","source":"_posts/Java/netty/伪异步IO.md","raw":"---\ntitle: 伪异步IO\ndate: 2019-04-17\ncategories: netty\ntags: [netty]\n---\n\n# 伪异步IO\n伪异步IO只是用线程池管理BIO中的线程,其他代码与BIO一致。\n\n## server\n[FakeBIOServer.java](https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/fakebio/FakeBIOServer.java)\n```java\npackage com.morris.fakebio;\n\nimport com.morris.bio.ServerHandler;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class FakeBIOServer {\n\n    public static int PORT = 8899;\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n\n        System.out.println(\"server is start on port: \" + PORT);\n        \n        ExecutorService executorService = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), 100, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(1000));\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            executorService.execute(new ServerHandler(socket));\n        }\n\n    }\n\n}\n```\n\n\n\n\n","slug":"Java/netty/伪异步IO","published":1,"updated":"2019-04-17T11:56:49.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604x10008h4qh005l20sc","content":"<h1 id=\"伪异步IO\"><a href=\"#伪异步IO\" class=\"headerlink\" title=\"伪异步IO\"></a>伪异步IO</h1><p>伪异步IO只是用线程池管理BIO中的线程,其他代码与BIO一致。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/fakebio/FakeBIOServer.java\" target=\"_blank\" rel=\"noopener\">FakeBIOServer.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.fakebio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.morris.bio.ServerHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FakeBIOServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), <span class=\"number\">100</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">1000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> ServerHandler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"abbrlink":"66487d6f","excerpt":"","more":"<h1 id=\"伪异步IO\"><a href=\"#伪异步IO\" class=\"headerlink\" title=\"伪异步IO\"></a>伪异步IO</h1><p>伪异步IO只是用线程池管理BIO中的线程,其他代码与BIO一致。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p><a href=\"https://gitee.com/morris131/morris-book/blob/master/Java/netty/nettyDemo/src/main/java/com/morris/fakebio/FakeBIOServer.java\" target=\"_blank\" rel=\"noopener\">FakeBIOServer.java</a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.morris.fakebio;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.morris.bio.ServerHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FakeBIOServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">8899</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"server is start on port: \"</span> + PORT);</span><br><span class=\"line\">        </span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), <span class=\"number\">100</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">1000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Socket socket = serverSocket.accept();</span><br><span class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> ServerHandler(socket));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"四种IO的比较","date":"2019-04-16T16:00:00.000Z","_content":"\n# 四种IO的比较\n\n## 名词解释\n同步和异步是针对应用程序和内核的交互而言的。 \n\n阻塞和非阻塞是针对于进程在访问数据的时候。  \n\n- 同步\t：用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪\n- 异步\t：用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知（异步的特点就是通知） \n- 阻塞\t：当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 \n- 非阻塞：非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待 \n\n## 比较\n![四种IO的比较](https://gitee.com/morris131/morris-book/raw/master/Java/netty/images/%E5%9B%9B%E7%A7%8DIO%E7%9A%84%E6%AF%94%E8%BE%83.png)\n\n## 不选择JAVA原生NIO编程的原因\n1. NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等；\n2. 需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序；\n3. 可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大；\n4. JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。\n   \n## 为什么选择Netty\n1. API使用简单，开发门槛低；\n2. 功能强大，预置了多种编解码功能，支持多种主流协议；\n3. 定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；\n4. 性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；\n5. 成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；\n6. 社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；\n7. 经历了大规模的商业应用考验，质量已经得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它可以完全满足不同行业的商业应用。\n\n## 为什么Netty使用NIO而不是AIO？\n1. Netty不看重Windows上的使用，在Linux系统上，AIO的底层实现仍使用EPOLL，没有很好实现AIO，因此在性能上没有明显的优势，而且被JDK封装了一层不容易深度优化\n2. Netty整体架构是reactor模型, 而AIO是proactor模型, 混合在一起会非常混乱,把AIO也改造成reactor模型看起来是把epoll绕个弯又绕回来\n3. AIO还有个缺点是接收数据需要预先分配缓存, 而不是NIO那种需要接收时才需要分配缓存, 所以对连接数量非常大但流量小的情况, 内存浪费很多\n4. Linux上AIO不够成熟，处理回调结果速度跟不到处理需求，","source":"_posts/Java/netty/四种IO的比较.md","raw":"---\ntitle: 四种IO的比较\ndate: 2019-04-17\ncategories: netty\ntags: [netty]\n---\n\n# 四种IO的比较\n\n## 名词解释\n同步和异步是针对应用程序和内核的交互而言的。 \n\n阻塞和非阻塞是针对于进程在访问数据的时候。  \n\n- 同步\t：用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪\n- 异步\t：用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知（异步的特点就是通知） \n- 阻塞\t：当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 \n- 非阻塞：非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待 \n\n## 比较\n![四种IO的比较](https://gitee.com/morris131/morris-book/raw/master/Java/netty/images/%E5%9B%9B%E7%A7%8DIO%E7%9A%84%E6%AF%94%E8%BE%83.png)\n\n## 不选择JAVA原生NIO编程的原因\n1. NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等；\n2. 需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序；\n3. 可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大；\n4. JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。\n   \n## 为什么选择Netty\n1. API使用简单，开发门槛低；\n2. 功能强大，预置了多种编解码功能，支持多种主流协议；\n3. 定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；\n4. 性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；\n5. 成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；\n6. 社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；\n7. 经历了大规模的商业应用考验，质量已经得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它可以完全满足不同行业的商业应用。\n\n## 为什么Netty使用NIO而不是AIO？\n1. Netty不看重Windows上的使用，在Linux系统上，AIO的底层实现仍使用EPOLL，没有很好实现AIO，因此在性能上没有明显的优势，而且被JDK封装了一层不容易深度优化\n2. Netty整体架构是reactor模型, 而AIO是proactor模型, 混合在一起会非常混乱,把AIO也改造成reactor模型看起来是把epoll绕个弯又绕回来\n3. AIO还有个缺点是接收数据需要预先分配缓存, 而不是NIO那种需要接收时才需要分配缓存, 所以对连接数量非常大但流量小的情况, 内存浪费很多\n4. Linux上AIO不够成熟，处理回调结果速度跟不到处理需求，","slug":"Java/netty/四种IO的比较","published":1,"updated":"2019-04-17T10:24:07.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604x4000bh4qh2abokkg2","content":"<h1 id=\"四种IO的比较\"><a href=\"#四种IO的比较\" class=\"headerlink\" title=\"四种IO的比较\"></a>四种IO的比较</h1><h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><p>同步和异步是针对应用程序和内核的交互而言的。 </p>\n<p>阻塞和非阻塞是针对于进程在访问数据的时候。  </p>\n<ul>\n<li>同步    ：用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪</li>\n<li>异步    ：用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知（异步的特点就是通知） </li>\n<li>阻塞    ：当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 </li>\n<li>非阻塞：非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待 </li>\n</ul>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p><img src=\"https://gitee.com/morris131/morris-book/raw/master/Java/netty/images/%E5%9B%9B%E7%A7%8DIO%E7%9A%84%E6%AF%94%E8%BE%83.png\" alt=\"四种IO的比较\"></p>\n<h2 id=\"不选择JAVA原生NIO编程的原因\"><a href=\"#不选择JAVA原生NIO编程的原因\" class=\"headerlink\" title=\"不选择JAVA原生NIO编程的原因\"></a>不选择JAVA原生NIO编程的原因</h2><ol>\n<li>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等；</li>\n<li>需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序；</li>\n<li>可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大；</li>\n<li>JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。</li>\n</ol>\n<h2 id=\"为什么选择Netty\"><a href=\"#为什么选择Netty\" class=\"headerlink\" title=\"为什么选择Netty\"></a>为什么选择Netty</h2><ol>\n<li>API使用简单，开发门槛低；</li>\n<li>功能强大，预置了多种编解码功能，支持多种主流协议；</li>\n<li>定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；</li>\n<li>性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；</li>\n<li>成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；</li>\n<li>社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；</li>\n<li>经历了大规模的商业应用考验，质量已经得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它可以完全满足不同行业的商业应用。</li>\n</ol>\n<h2 id=\"为什么Netty使用NIO而不是AIO？\"><a href=\"#为什么Netty使用NIO而不是AIO？\" class=\"headerlink\" title=\"为什么Netty使用NIO而不是AIO？\"></a>为什么Netty使用NIO而不是AIO？</h2><ol>\n<li>Netty不看重Windows上的使用，在Linux系统上，AIO的底层实现仍使用EPOLL，没有很好实现AIO，因此在性能上没有明显的优势，而且被JDK封装了一层不容易深度优化</li>\n<li>Netty整体架构是reactor模型, 而AIO是proactor模型, 混合在一起会非常混乱,把AIO也改造成reactor模型看起来是把epoll绕个弯又绕回来</li>\n<li>AIO还有个缺点是接收数据需要预先分配缓存, 而不是NIO那种需要接收时才需要分配缓存, 所以对连接数量非常大但流量小的情况, 内存浪费很多</li>\n<li>Linux上AIO不够成熟，处理回调结果速度跟不到处理需求，</li>\n</ol>\n","site":{"data":{}},"abbrlink":"cde0db97","excerpt":"","more":"<h1 id=\"四种IO的比较\"><a href=\"#四种IO的比较\" class=\"headerlink\" title=\"四种IO的比较\"></a>四种IO的比较</h1><h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><p>同步和异步是针对应用程序和内核的交互而言的。 </p>\n<p>阻塞和非阻塞是针对于进程在访问数据的时候。  </p>\n<ul>\n<li>同步    ：用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪</li>\n<li>异步    ：用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知（异步的特点就是通知） </li>\n<li>阻塞    ：当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 </li>\n<li>非阻塞：非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待 </li>\n</ul>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p><img src=\"https://gitee.com/morris131/morris-book/raw/master/Java/netty/images/%E5%9B%9B%E7%A7%8DIO%E7%9A%84%E6%AF%94%E8%BE%83.png\" alt=\"四种IO的比较\"></p>\n<h2 id=\"不选择JAVA原生NIO编程的原因\"><a href=\"#不选择JAVA原生NIO编程的原因\" class=\"headerlink\" title=\"不选择JAVA原生NIO编程的原因\"></a>不选择JAVA原生NIO编程的原因</h2><ol>\n<li>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等；</li>\n<li>需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序；</li>\n<li>可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大；</li>\n<li>JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。</li>\n</ol>\n<h2 id=\"为什么选择Netty\"><a href=\"#为什么选择Netty\" class=\"headerlink\" title=\"为什么选择Netty\"></a>为什么选择Netty</h2><ol>\n<li>API使用简单，开发门槛低；</li>\n<li>功能强大，预置了多种编解码功能，支持多种主流协议；</li>\n<li>定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；</li>\n<li>性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；</li>\n<li>成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；</li>\n<li>社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；</li>\n<li>经历了大规模的商业应用考验，质量已经得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它可以完全满足不同行业的商业应用。</li>\n</ol>\n<h2 id=\"为什么Netty使用NIO而不是AIO？\"><a href=\"#为什么Netty使用NIO而不是AIO？\" class=\"headerlink\" title=\"为什么Netty使用NIO而不是AIO？\"></a>为什么Netty使用NIO而不是AIO？</h2><ol>\n<li>Netty不看重Windows上的使用，在Linux系统上，AIO的底层实现仍使用EPOLL，没有很好实现AIO，因此在性能上没有明显的优势，而且被JDK封装了一层不容易深度优化</li>\n<li>Netty整体架构是reactor模型, 而AIO是proactor模型, 混合在一起会非常混乱,把AIO也改造成reactor模型看起来是把epoll绕个弯又绕回来</li>\n<li>AIO还有个缺点是接收数据需要预先分配缓存, 而不是NIO那种需要接收时才需要分配缓存, 所以对连接数量非常大但流量小的情况, 内存浪费很多</li>\n<li>Linux上AIO不够成熟，处理回调结果速度跟不到处理需求，</li>\n</ol>\n"},{"title":"git设置mergetool可视化工具BeyondCompare","abbrlink":"3765ef4c","date":"2018-04-16T16:00:00.000Z","_content":"\n可以设置BeyondCompare作为git的比较和合并的可视化工具,方便操作.\n设置如下:\n\n1. 先下载并安装BeyondCompare\n2. 命令输入如下配置\n```\n#difftool 配置\ngit config --global diff.tool bc4\ngit config --global difftool.bc4.cmd \"\\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"\n\n#mergeftool 配置\ngit config --global merge.tool bc4\ngit config --global mergetool.bc4.cmd  \"\\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\"\"\ngit config --global mergetool.bc4.trustExitCode true\n\n#让git mergetool不再生成备份文件（*.orig）\ngit config --global mergetool.keepBackup false\n```\n\n若未生效，直接修改用户目录下.gitconfig文件\n```\n[diff]\n\ttool = bc4\n[difftool \"bc4\"]\n\tcmd = \\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n[merge]\n\ttool = bc4\n[mergetool \"bc4\"]\n\tcmd = \\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\"\n\ttrustExitCode = true\n[mergetool]\n\tkeepBackup = false\n```\n\n使用方法如下:\n```\n# diff使用方法:\ngit difftool HEAD // 比较当前修改情况\n\n# merge使用方法\n# git mergetool\n```","source":"_posts/开发工具/git/git设置mergetool可视化工具BeyondCompare.md","raw":"---\ntitle: git设置mergetool可视化工具BeyondCompare\ncategories: git\ntags:\n  - git\n  - mergetool\n  - BeyondCompare\nabbrlink: 3765ef4c\ndate: 2018-04-17 00:00:00\n---\n\n可以设置BeyondCompare作为git的比较和合并的可视化工具,方便操作.\n设置如下:\n\n1. 先下载并安装BeyondCompare\n2. 命令输入如下配置\n```\n#difftool 配置\ngit config --global diff.tool bc4\ngit config --global difftool.bc4.cmd \"\\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"\n\n#mergeftool 配置\ngit config --global merge.tool bc4\ngit config --global mergetool.bc4.cmd  \"\\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\"\"\ngit config --global mergetool.bc4.trustExitCode true\n\n#让git mergetool不再生成备份文件（*.orig）\ngit config --global mergetool.keepBackup false\n```\n\n若未生效，直接修改用户目录下.gitconfig文件\n```\n[diff]\n\ttool = bc4\n[difftool \"bc4\"]\n\tcmd = \\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n[merge]\n\ttool = bc4\n[mergetool \"bc4\"]\n\tcmd = \\\"C:/Program Files/Beyond Compare 4/BComp.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\"\n\ttrustExitCode = true\n[mergetool]\n\tkeepBackup = false\n```\n\n使用方法如下:\n```\n# diff使用方法:\ngit difftool HEAD // 比较当前修改情况\n\n# merge使用方法\n# git mergetool\n```","slug":"开发工具/git/git设置mergetool可视化工具BeyondCompare","published":1,"updated":"2019-04-17T08:03:50.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul604zd000yh4qhrqkovsvz","content":"<p>可以设置BeyondCompare作为git的比较和合并的可视化工具,方便操作.<br>设置如下:</p>\n<ol>\n<li>先下载并安装BeyondCompare</li>\n<li>命令输入如下配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#difftool 配置</span><br><span class=\"line\">git config --global diff.tool bc4</span><br><span class=\"line\">git config --global difftool.bc4.cmd &quot;\\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#mergeftool 配置</span><br><span class=\"line\">git config --global merge.tool bc4</span><br><span class=\"line\">git config --global mergetool.bc4.cmd  &quot;\\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; \\&quot;$BASE\\&quot; \\&quot;$MERGED\\&quot;&quot;</span><br><span class=\"line\">git config --global mergetool.bc4.trustExitCode true</span><br><span class=\"line\"></span><br><span class=\"line\">#让git mergetool不再生成备份文件（*.orig）</span><br><span class=\"line\">git config --global mergetool.keepBackup false</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若未生效，直接修改用户目录下.gitconfig文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[diff]</span><br><span class=\"line\">\ttool = bc4</span><br><span class=\"line\">[difftool &quot;bc4&quot;]</span><br><span class=\"line\">\tcmd = \\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;</span><br><span class=\"line\">[merge]</span><br><span class=\"line\">\ttool = bc4</span><br><span class=\"line\">[mergetool &quot;bc4&quot;]</span><br><span class=\"line\">\tcmd = \\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; \\&quot;$BASE\\&quot; \\&quot;$MERGED\\&quot;</span><br><span class=\"line\">\ttrustExitCode = true</span><br><span class=\"line\">[mergetool]</span><br><span class=\"line\">\tkeepBackup = false</span><br></pre></td></tr></table></figure></p>\n<p>使用方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># diff使用方法:</span><br><span class=\"line\">git difftool HEAD // 比较当前修改情况</span><br><span class=\"line\"></span><br><span class=\"line\"># merge使用方法</span><br><span class=\"line\"># git mergetool</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>可以设置BeyondCompare作为git的比较和合并的可视化工具,方便操作.<br>设置如下:</p>\n<ol>\n<li>先下载并安装BeyondCompare</li>\n<li>命令输入如下配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#difftool 配置</span><br><span class=\"line\">git config --global diff.tool bc4</span><br><span class=\"line\">git config --global difftool.bc4.cmd &quot;\\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#mergeftool 配置</span><br><span class=\"line\">git config --global merge.tool bc4</span><br><span class=\"line\">git config --global mergetool.bc4.cmd  &quot;\\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; \\&quot;$BASE\\&quot; \\&quot;$MERGED\\&quot;&quot;</span><br><span class=\"line\">git config --global mergetool.bc4.trustExitCode true</span><br><span class=\"line\"></span><br><span class=\"line\">#让git mergetool不再生成备份文件（*.orig）</span><br><span class=\"line\">git config --global mergetool.keepBackup false</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若未生效，直接修改用户目录下.gitconfig文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[diff]</span><br><span class=\"line\">\ttool = bc4</span><br><span class=\"line\">[difftool &quot;bc4&quot;]</span><br><span class=\"line\">\tcmd = \\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;</span><br><span class=\"line\">[merge]</span><br><span class=\"line\">\ttool = bc4</span><br><span class=\"line\">[mergetool &quot;bc4&quot;]</span><br><span class=\"line\">\tcmd = \\&quot;C:/Program Files/Beyond Compare 4/BComp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; \\&quot;$BASE\\&quot; \\&quot;$MERGED\\&quot;</span><br><span class=\"line\">\ttrustExitCode = true</span><br><span class=\"line\">[mergetool]</span><br><span class=\"line\">\tkeepBackup = false</span><br></pre></td></tr></table></figure></p>\n<p>使用方法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># diff使用方法:</span><br><span class=\"line\">git difftool HEAD // 比较当前修改情况</span><br><span class=\"line\"></span><br><span class=\"line\"># merge使用方法</span><br><span class=\"line\"># git mergetool</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjul604wz0007h4qhbz2l502m","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604x5000ch4qhq3gobuic"},{"post_id":"cjul604wj0002h4qhj5ipluj9","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604x7000gh4qhackmrpcz"},{"post_id":"cjul604x10008h4qh005l20sc","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604x8000ih4qho1nllyfb"},{"post_id":"cjul604x4000bh4qh2abokkg2","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604x9000lh4qhyrt7x0k6"},{"post_id":"cjul604wo0003h4qhuskpuih4","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604x9000mh4qhn1xtikzg"},{"post_id":"cjul604wy0006h4qh9r9rfr6x","category_id":"cjul604wv0004h4qhp626gnik","_id":"cjul604xa000oh4qhmsr3wtan"},{"post_id":"cjul604zd000yh4qhrqkovsvz","category_id":"cjul604zf000zh4qhjumn8u1t","_id":"cjul604zh0012h4qhmnrn99g4"}],"PostTag":[{"post_id":"cjul604x4000bh4qh2abokkg2","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604x7000fh4qh7xvld7c6"},{"post_id":"cjul604wj0002h4qhj5ipluj9","tag_id":"cjul604wx0005h4qhv4ue3719","_id":"cjul604x8000hh4qhrmwc5soi"},{"post_id":"cjul604wj0002h4qhj5ipluj9","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604x9000kh4qh4z0ituuf"},{"post_id":"cjul604wo0003h4qhuskpuih4","tag_id":"cjul604x7000eh4qhiij14a5o","_id":"cjul604xa000ph4qhfc97dxcu"},{"post_id":"cjul604wo0003h4qhuskpuih4","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604xa000qh4qhp1ra75gs"},{"post_id":"cjul604wy0006h4qh9r9rfr6x","tag_id":"cjul604xa000nh4qhsn5qd73d","_id":"cjul604xc000th4qhuaeau79b"},{"post_id":"cjul604wy0006h4qh9r9rfr6x","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604xc000uh4qhyu37hwia"},{"post_id":"cjul604wz0007h4qhbz2l502m","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604xd000wh4qh5jxxxs1a"},{"post_id":"cjul604x10008h4qh005l20sc","tag_id":"cjul604x2000ah4qhuvar3v9f","_id":"cjul604xd000xh4qh8jyqdzzm"},{"post_id":"cjul604zd000yh4qhrqkovsvz","tag_id":"cjul604zf0010h4qhf8q8e0ki","_id":"cjul604zi0014h4qhg8vcztsb"},{"post_id":"cjul604zd000yh4qhrqkovsvz","tag_id":"cjul604zg0011h4qhrzqtp9os","_id":"cjul604zi0015h4qhuerxljvd"},{"post_id":"cjul604zd000yh4qhrqkovsvz","tag_id":"cjul604zh0013h4qhuuwldshd","_id":"cjul604zj0016h4qhaqlefgvk"}],"Tag":[{"name":"AIO","_id":"cjul604wx0005h4qhv4ue3719"},{"name":"netty","_id":"cjul604x2000ah4qhuvar3v9f"},{"name":"BIO","_id":"cjul604x7000eh4qhiij14a5o"},{"name":"NIO","_id":"cjul604xa000nh4qhsn5qd73d"},{"name":"git","_id":"cjul604zf0010h4qhf8q8e0ki"},{"name":"mergetool","_id":"cjul604zg0011h4qhrzqtp9os"},{"name":"BeyondCompare","_id":"cjul604zh0013h4qhuuwldshd"}]}}